c(1,2,3) %in% a
c(1,2,3) %in% a[[1]]
c(1,2,3) %in% a
c(1,2,3) %in% a[[]]
c(1,2,3) %in% a[]
sapply(a, function(x) c(1,2,3) %in% x)
a <- data.frame(arrays = rep(NA,3))
a
a[[1]] <- c(1,2,3)
a
a[1,] <- c(1,2,3)
a <- list(rep(NA,3))
a
a[[1]] <- c(1,2,3)
a[[2]] <- c(1,2,33)
a
c(1,2,3) %in% a
c(1,2,3) %in% a[[1]]
c(1,2,3) %in% a[[2]]
all(c(1,2,3) %in% a[[2]])
all(c(1,2,3) %in% a[[1]])
sapply(a,function(x) all(c(1,2,3) %in% a[[x]]))
lapply(a,function(x) all(c(1,2,3) %in% a[[x]]))
lapply(a,function(x) all(c(1,2,3) %in% a[x]))
lapply(a,function(x) all(c(1,2,3) %in% a[[x]]))
a[[1]] <- c(1,2,3)
a[[2]] <- c(4,5,6)
a
a[[1]][2] <- c(4,5,6)
a[1]
a[2]
a
a[[1]][1]
a[[1]][2]
a[[1]] <- c(1,2,3)
a[[2]] <- c(12,2,3)
a
list(c(1,2,3)) %in% a
list(c(1,2,23)) %in% a
list(c(12,2,23)) %in% a
list(c(12,2,3)) %in% a
which(list(c(12,2,3)) %in% a)
which(list(c(12,2,3)) %in% a)
a
is.element(c(1,2,3),a)
is.element(list(c(1,2,3)),a)
which(sapply(a,is.element(list(c(1,2,3)),a)))
which(sapply(x,function(x) is.element(list(c(1,2,3)),x)))
which(sapply(a,function(x) is.element(list(c(1,2,3)),x)))
sapply(a,function(x) which(is.element(list(c(1,2,3)),x)))
a[which(c(1,2,3))]
a[which(list(c(1,2,3)))]
a[which(list(c(1,2,3)) %in% a)]
a
a[which(list(c(12,2,3)) %in% a)]
which(sapply(a, function(x) c(12,2,3) %in% x))
which(sapply(a, function(x) c(12,2,3) %in% x[]))
which(sapply(a, function(x) c(12,2,3) %in% x[[]]))
which(sapply(a, function(x) list(c(12,2,3)) %in% x))
a <- vector("dataframe", length = 3)
a <- data.frame(arrays = rep(NA,3))
a
a[[1]] <- I(c(1,2,3))
a
a[[1]] <- list(c(1,2,3))
a
a[1,] <- list(c(1,2,3))
a <- list(rep(NA,3))
a
a <- list()
a[[1]] <- c(1,2,3)
a[[2]] <- c(2,3,4)
a
which(c(1,2,3) %in% a)
which(list(c(1,2,3)) %in% a)
which(list(c(2,3,4)) %in% a)
6 %% 14
a <- list()
a[[1]] <- c(1,2,3)
a[[2]] <- c(2,3,4)
which(list(c(2,3,4)) %in% a)
sapply(a, function(x) all(c(2,3,4) %in% x))
which(sapply(a, function(x) all(c(2,3,4) %in% x)))
which(sapply(a, function(x) all(c(3,2,4) %in% x)))
which(sapply(a, function(x) all(c(3,2,4) %in% x)))
which(sapply(a, function(x) all(c(3,2,4) %in% x)))
a <- data.frame(x1=rep(NA,4),
x2=rep(NA,4),
x3=rep(NA,4),
x4=rep(NA,4),
x5=rep(NA,4),
x6=rep(NA,4),
x7=rep(NA,4),
x8=rep(NA,4))
a
a[[1]] <- prisonStates(c(0,1,0,1,1,0,0,1),7)
a[[1]] <-t(prisonStates(c(0,1,0,1,1,0,0,1),7))
a[1,] <-prisonStates(c(0,1,0,1,1,0,0,1),7)
a
prisonStates <- function(arr,N){
seen <- data.frame(x1=rep(NA,rep(NA,2^length(arr))),
x2=rep(NA,rep(NA,2^length(arr))),
x3=rep(NA,rep(NA,2^length(arr))),
x4=rep(NA,rep(NA,2^length(arr))),
x5=rep(NA,rep(NA,2^length(arr))),
x6=rep(NA,rep(NA,2^length(arr))),
x7=rep(NA,rep(NA,2^length(arr))),
x8=rep(NA,rep(NA,2^length(arr))))
seen_i <- 1
days <- 0
cnt <- 1
cat("\n",paste0("Day ",0,": "),arr,"\n")
next_arr <- as.numeric(rep(0,length(arr)))
for(i in 1:(N*length(arr))){
if(cnt==1 | cnt==length(arr)) next_arr[cnt] <- 0
else {
if(((arr[cnt-1]==0) & (arr[cnt+1]==0)) | ((arr[cnt-1]==1) & (arr[cnt+1]==1))) next_arr[cnt] <- 1
}
if(cnt == length(arr)) {
days <- days + 1
cnt <- 1
if(days > N) break()
cat("\n",paste0("Day ",days,": "),next_arr,"\n")
arr <- next_arr
seen[seen_i,] <- arr
next_arr <- as.numeric(rep(0,length(arr)))
}
else cnt <- cnt + 1
}
return(arr)
}
debug(prisonStates)
prisonStates(c(0,1,0,1,1,0,0,1),7)
prisonStates <- function(arr,N){
seen <- data.frame(x1=rep(NA,2^length(arr)),
x2=rep(NA,2^length(arr)),
x3=rep(NA,2^length(arr)),
x4=rep(NA,2^length(arr)),
x5=rep(NA,2^length(arr)),
x6=rep(NA,2^length(arr)),
x7=rep(NA,2^length(arr)),
x8=rep(NA,2^length(arr)))
seen_i <- 1
days <- 0
cnt <- 1
cat("\n",paste0("Day ",0,": "),arr,"\n")
next_arr <- as.numeric(rep(0,length(arr)))
for(i in 1:(N*length(arr))){
if(cnt==1 | cnt==length(arr)) next_arr[cnt] <- 0
else {
if(((arr[cnt-1]==0) & (arr[cnt+1]==0)) | ((arr[cnt-1]==1) & (arr[cnt+1]==1))) next_arr[cnt] <- 1
}
if(cnt == length(arr)) {
days <- days + 1
cnt <- 1
if(days > N) break()
cat("\n",paste0("Day ",days,": "),next_arr,"\n")
arr <- next_arr
seen[seen_i,] <- arr
next_arr <- as.numeric(rep(0,length(arr)))
}
else cnt <- cnt + 1
}
return(arr)
}
debug(prisonStates)
prisonStates(c(0,1,0,1,1,0,0,1),7)
View(seen)
prisonStates <- function(arr,N){
seen <- data.frame(x1=rep(NA,2^length(arr)),
x2=rep(NA,2^length(arr)),
x3=rep(NA,2^length(arr)),
x4=rep(NA,2^length(arr)),
x5=rep(NA,2^length(arr)),
x6=rep(NA,2^length(arr)),
x7=rep(NA,2^length(arr)),
x8=rep(NA,2^length(arr)))
seen_i <- 1
days <- 0
cnt <- 1
cat("\n",paste0("Day ",0,": "),arr,"\n")
next_arr <- as.numeric(rep(0,length(arr)))
for(i in 1:(N*length(arr))){
if(cnt==1 | cnt==length(arr)) next_arr[cnt] <- 0
else {
if(((arr[cnt-1]==0) & (arr[cnt+1]==0)) | ((arr[cnt-1]==1) & (arr[cnt+1]==1))) next_arr[cnt] <- 1
}
if(cnt == length(arr)) {
days <- days + 1
cnt <- 1
if(days > N) break()
cat("\n",paste0("Day ",days,": "),next_arr,"\n")
arr <- next_arr
seen[seen_i,] <- arr
seen_i <- seen_i + 1
next_arr <- as.numeric(rep(0,length(arr)))
}
else cnt <- cnt + 1
}
return(arr)
}
debug(prisonStates)
prisonStates(c(0,1,0,1,1,0,0,1),7)
View(seen)
c(1,3,0,10,5) == sort(c(1,3,0,10,5), decreasing = T)
all(c(1,3,0,10,5) == sort(c(1,3,0,10,5), decreasing = T))
all(c(10,5,3,1,0) == sort(c(1,3,0,10,5), decreasing = T))
findProfit <- function(arr){
if (all(sort(arr,decreasing = T) == arr) == T) return(0)
else {
buy <- min(arr)
new_arr <- arr[which(buy):length(arr)]
sell <- max(new_arr)
}
return(sell - buy)
}
findProfit(c(7,1,5,3,6,4))
findProfit <- function(arr){
if (all(sort(arr,decreasing = T) == arr) == T) return(0)
else {
buy <- min(arr)
new_arr <- arr[which(arr==buy):length(arr)]
sell <- max(new_arr)
}
return(sell - buy)
}
findProfit(c(7,1,5,3,6,4))
findProfit(c(7,6,4,3,1))
findProfit(c(19,7,6,8,2,34,12,11,10,4))
debug(min)
min(c(1,2,6,0,19))
min(c(1,2,6,0,19))
debug(base::min)
min(c(1,2,6,0,19))
.Primitive(min)
.Primitive("min")
.Library
library(raster)
install.packages("raster")
library(raster)
# Define extent
xmin=0
ymin=0
xmax=25
ymax=25
aoi_extent=extent(xmin, xmax, ymin, ymax)
# Create grid and get xy coordinates from which toi extract these random points)
rast <- raster(ext=aoi_extent, resolution=1)
values(rast)= 1:ncell(rast) # give raster cells a value
# Extract cell centre coordinates
x_centres=xFromCol(rast)
y_centres=yFromRow(rast)
# Simulation to show that random concentrations of points is totally a possibility #
rm(list = ls(all.names = T))
gc()
# Define extent
xmin=0
ymin=0
xmax=25
ymax=25
aoi_extent=extent(xmin, xmax, ymin, ymax)
# Create grid and get xy coordinates from which toi extract these random points)
rast <- raster(ext=aoi_extent, resolution=1)
values(rast)= 1:ncell(rast) # give raster cells a value
# Extract cell centre coordinates
x_centres=xFromCol(rast)
y_centres=yFromRow(rast)
# Select some random points
random_point_count=0
random_point_sample_number=1000 # the number of points you want
# Define extent
xmin=0
ymin=0
xmax=100
ymax=100
aoi_extent=extent(xmin, xmax, ymin, ymax)
# Create grid and get xy coordinates from which toi extract these random points)
rast <- raster(ext=aoi_extent, resolution=1)
values(rast)= 1:ncell(rast) # give raster cells a value
# Extract cell centre coordinates
x_centres=xFromCol(rast)
y_centres=yFromRow(rast)
# Select some random points
random_point_count=0
random_point_sample_number=1000 # the number of points you want
library("ggplot2")
library("reshape2")
# Convert raster to matrix
mat=as.matrix(rast)
View(mat)
dat = melt(mat)
View(dat)
# Shift over the easting (now Var1) and northing (now Var2) values by half a pixel
# (ggplot uses coordinates as mid-points,
# whereas we want it to plot from the mid-point minus half a pixel length or width)
dat$Var1=dat$Var1-0.5
dat$Var2=dat$Var2-0.5
xmin=0
ymin=0
xmax=100
ymax=100
aoi_extent=extent(xmin, xmax, ymin, ymax)
# Create grid and get xy coordinates from which toi extract these random points)
rast <- raster(ext=aoi_extent, resolution=1)
values(rast)= 1:ncell(rast) # give raster cells a value
# Extract cell centre coordinates
x_centres=xFromCol(rast)
y_centres=yFromRow(rast)
# Select some random points
random_point_count=0
random_point_sample_number=1000 # the number of points you want
while (random_point_count < random_point_sample_number){
easting_random=sample(x_centres, 1)
northing_random=sample(y_centres, 1)
if (exists("random_points")==TRUE){
# random_points dataframe already exists
random_points=rbind(random_points,
c("EASTING"=easting_random,
"NORTHING"=northing_random))
} else {
# random_points dataframe doesn't exist yet...")
random_points=data.frame("EASTING"=easting_random,"NORTHING"=northing_random)
}
random_point_count=random_point_count+1
}
# Convert raster to matrix
mat=as.matrix(rast)
dat = melt(mat)
# Shift over the easting (now Var1) and northing (now Var2) values by half a pixel
# (ggplot uses coordinates as mid-points,
# whereas we want it to plot from the mid-point minus half a pixel length or width)
dat$Var1=dat$Var1-0.5
dat$Var2=dat$Var2-0.5
View(dat)
ggplot(dat, aes(x=Var1, y=Var2)) +
geom_tile(aes(fill=value), colour="grey20") +
scale_fill_gradientn(colours = terrain.colors(10)) +
geom_point(data = random_points, mapping = aes(x=EASTING, y=NORTHING), colour="black") +
labs(x="Easting", y="Northing") +
theme(legend.position="none")
install.packages(c("evd", "fBasics", "ismev", "SpatialExtremes"))
set.seed(1029776)
orig_data <- round(rnorm(100,mean = 12000, sd = 2000),0)
hist(orig_data)
# calculate empirical CDF
emp_cdf <- ecdf(orig_data)
emp_cdf(12000)
a <- emp_cdf(sample(orig_data, size = length(orig_data), replace = T))^(length(orig_data))
set.seed(13774)
n <- 1000
raw_data <- round(rnorm(n, mean = 8000, sd = 4020),0)
m <- 20
sample_max <- function(s = 10){
max(sample(raw_data, size = s, replace = T))
}
sim_max <- replicate(1000, sample_max(m))
hist(sim_max, breaks=50, prob=T, main="pdf of Z=max(X)", col = "brown", xlab = "Z")
title(sub = "100 draws of maximum from Normal(12000,2000)")
library("fBasics")
library("evd")
library("ismev")
basicStats(sim_max)
# estimate the extreme value
fgev(sim_max)
# get the confidence intervals
confint(fgev(sim_max))
# graphs
par(mfrow = c(1,3))
plot(profile(fgev(sim_max)),ci = c(0.95, 0.99))
# confidence levels can be obtained through the functions:
confint(profile(fgev(sim_max)), level=0.95)
confint(profile(fgev(sim_max)), level=0.99)
# Diagnostic plots
par(mfrow = c(1,4))
plot(fgev(sim_max))
# using "SpatialExtremes"
install.packages("SpatialExtremes")
library("SpatialExtremes")
# calculate the probability of P(X>x) (small probs are suspicious observations)
a <- pgev(raw_data,loc = 14813.2662, scale = 2271.8953, shape = -0.1723, lower.tail = F)
# make a data frame with the probs vector
df <- data.frame(orig_obs = raw_data, prob = a)
library("dplyr")
df <- df %>% arrange(a)
View(df)
partial
mtcars
mtcars[,-1]
mtcars
a <- mtcars
a[1,1]
a[1,1] <- NA
a
sum(c(1,2,3,NA,4))
partial(sum(c(1,2,3,NA,4)),na.rm)
pryr::partial(sum(c(1,2,3,NA,4)),na.rm)
pryr::compose(sum,partial(na.rm, T))
pryr::compose(sum,pryr::partial(na.rm, T))
pryr::compose(sum,pryr::partial(rm.na, T))
pryr::compose(sum,pryr::partial(na.rm, T))
setwd("/Users/corel/Dropbox/Docs/Data analysis/coursera data science/reproduicabale_research/RepData_PeerAssessment1")
mydata <- read.csv("./activity.csv", stringsAsFactors = F, header = T)
View(mydata)
str(mydata)
View(mydata)
library("dplyr")
mydata$date <- as.Date(mydata$date)
View(mydata)
View(mydata)
names(mydata)
# total number of steps per day
mydata %>% group_by(date) %>% summarise(sum(steps, na.rm = T))
library("ggplot2")
# total number of steps per day
mydata %>% group_by(date) %>% summarise(steps_per_day = sum(steps, na.rm = T)) %>%
ggplot(aes(x = steps_per_day)) +
geom_histogram(stat = "count",fill = "brown", color = "black")
# total number of steps per day
mydata %>% group_by(date) %>% summarise(steps_per_day = sum(steps, na.rm = T)) %>%
ggplot(aes(x = steps_per_day)) +
geom_histogram(stat = "bin",fill = "brown", color = "black")
mydata %>% group_by(date) %>% summarise(steps_per_day = sum(steps, na.rm = T)) %>% ungroup() %>% summarise(mean = mean(steps_per_day),
median = median(steps_per_day))
mydata %>% group_by(date) %>% summarise(steps_per_day = sum(steps, na.rm = T)) %>% ungroup() %>% summarise(mean = mean(steps_per_day),
median = median(steps_per_day))
names(mydata)
# time series plot
mydata %>% group_by(interval) %>% summarise(avg_steps = mean(steps, na.rm = T)) %>% ungroup()
# time series plot
mydata %>% group_by(interval) %>% summarise(avg_steps = mean(steps, na.rm = T)) %>% ungroup() %>%
ggplot(aes(x = interval, y = avg_steps)) +
geom_line()
# time series plot
mydata %>% group_by(interval) %>% summarise(avg_steps = mean(steps, na.rm = T)) %>% ungroup() %>%
ggplot(aes(x = interval, y = avg_steps)) +
geom_line() +
scale_x_continuous(breaks = seq(0,2500,100))
# time series plot
mydata %>% group_by(interval) %>% summarise(avg_steps = mean(steps, na.rm = T)) %>% ungroup() %>%
ggplot(aes(x = interval, y = avg_steps)) +
geom_line() +
scale_x_continuous(breaks = seq(0,2500,100)) +
labs(title = "Average Daily Activity", x = "Interval", y = "Average Steps")
View(mydata)
# Imputing missing values
sum(is.na(mydata$steps))
# fill NA with median of that day
mydata <- mydata %>% group_by(date) %>% mutate(med_day = median(steps, na.rm = T)) %>% ungroup()
mydata$steps[is.na(mydata$steps)] <- mydata$med_day
View(mydata)
# fill NA with median of that day
mydata <- mydata %>% group_by(date) %>% mutate(med_day = median(steps, na.rm = T)) %>% ungroup()
View(mydata)
# fill NA with median of that day
mydata <- mydata %>% group_by(date) %>% mutate(med_day = mean(steps, na.rm = T)) %>% ungroup()
mydata$steps[is.na(mydata$steps)] <- mydata$med_day
View(mydata)
# fill NA with median of that day
mydata <- mydata %>% group_by(date) %>% mutate(med_day = mean(steps, na.rm = T)) %>% ungroup()
mydata$steps[is.na(mydata$steps)] <- mydata$med_day[is.na(mydata$steps)]
View(mydata)
setwd("/Users/corel/Dropbox/Docs/Data analysis/coursera data science/reproduicabale_research/RepData_PeerAssessment1")
library("dplyr")
library("ggplot2")
# data reading
mydata <- read.csv("./activity.csv", stringsAsFactors = F, header = T)
str(mydata)
mydata$date <- as.Date(mydata$date)
# total number of steps per day
mydata %>% group_by(date) %>% summarise(steps_per_day = sum(steps, na.rm = T))
mydata %>% group_by(date) %>% summarise(steps_per_day = sum(steps, na.rm = T)) %>%
ggplot(aes(x = steps_per_day)) +
geom_histogram(stat = "bin",fill = "brown", color = "black")
mydata %>% group_by(date) %>% summarise(steps_per_day = sum(steps, na.rm = T)) %>% ungroup() %>% summarise(mean = mean(steps_per_day),
median = median(steps_per_day))
# time series plot
mydata %>% group_by(interval) %>% summarise(avg_steps = mean(steps, na.rm = T)) %>% ungroup() %>%
ggplot(aes(x = interval, y = avg_steps)) +
geom_line() +
scale_x_continuous(breaks = seq(0,2500,100)) +
labs(title = "Average Daily Activity", x = "Interval", y = "Average Steps")
# Imputing missing values
sum(is.na(mydata$steps))
# fill NA with median of that day
mydata <- mydata %>% group_by(date) %>% mutate(med_day = mean(steps, na.rm = T)) %>% ungroup()
mydata$steps[is.na(mydata$steps)] <- mydata$med_day[is.na(mydata$steps)]
View(mydata)
setwd("/Users/corel/Dropbox/Docs/Data analysis/coursera data science/reproduicabale_research/RepData_PeerAssessment1")
library("dplyr")
library("ggplot2")
# data reading
mydata <- read.csv("./activity.csv", stringsAsFactors = F, header = T)
str(mydata)
mydata$date <- as.Date(mydata$date)
# total number of steps per day
mydata %>% group_by(date) %>% summarise(steps_per_day = sum(steps, na.rm = T))
mydata %>% group_by(date) %>% summarise(steps_per_day = sum(steps, na.rm = T)) %>%
ggplot(aes(x = steps_per_day)) +
geom_histogram(stat = "bin",fill = "brown", color = "black")
mydata %>% group_by(date) %>% summarise(steps_per_day = sum(steps, na.rm = T)) %>% ungroup() %>% summarise(mean = mean(steps_per_day),
median = median(steps_per_day))
# time series plot
mydata %>% group_by(interval) %>% summarise(avg_steps = mean(steps, na.rm = T)) %>% ungroup() %>%
ggplot(aes(x = interval, y = avg_steps)) +
geom_line() +
scale_x_continuous(breaks = seq(0,2500,100)) +
labs(title = "Average Daily Activity", x = "Interval", y = "Average Steps")
# Imputing missing values
sum(is.na(mydata$steps))
# fill NA with median of that day
mydata <- mydata %>% group_by(date) %>% mutate(med_day = mean(steps, na.rm = T)) %>% ungroup()
View(mydata)
